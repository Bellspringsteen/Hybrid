CCS PCM C Compiler, Version 4.084, 46530               24-Nov-12 15:44

               Filename: HondaHybrid.lst

               ROM used: 450 words (12%)
                         Largest free fragment is 1788
               RAM used: 40 (22%) at main() level
                         48 (27%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   11C
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  26
0008:  MOVF   7F,W
0009:  MOVWF  25
000A:  MOVF   0A,W
000B:  MOVWF  2D
000C:  CLRF   0A
000D:  SWAPF  25,F
000E:  MOVF   04,W
000F:  MOVWF  27
0010:  MOVF   20,W
0011:  MOVWF  28
0012:  MOVF   21,W
0013:  MOVWF  29
0014:  MOVF   22,W
0015:  MOVWF  2A
0016:  MOVF   23,W
0017:  MOVWF  2B
0018:  MOVF   24,W
0019:  MOVWF  2C
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   03F
0022:  MOVLW  8D
0023:  MOVWF  04
0024:  BTFSS  00.0
0025:  GOTO   028
0026:  BTFSC  0D.0
0027:  GOTO   041
0028:  BTFSS  0B.5
0029:  GOTO   02C
002A:  BTFSC  0B.2
002B:  GOTO   043
002C:  MOVF   27,W
002D:  MOVWF  04
002E:  MOVF   28,W
002F:  MOVWF  20
0030:  MOVF   29,W
0031:  MOVWF  21
0032:  MOVF   2A,W
0033:  MOVWF  22
0034:  MOVF   2B,W
0035:  MOVWF  23
0036:  MOVF   2C,W
0037:  MOVWF  24
0038:  MOVF   2D,W
0039:  MOVWF  0A
003A:  SWAPF  26,W
003B:  MOVWF  03
003C:  SWAPF  7F,F
003D:  SWAPF  7F,W
003E:  RETFIE
003F:  BCF    0A.3
0040:  GOTO   055
0041:  BCF    0A.3
0042:  GOTO   09C
0043:  BCF    0A.3
0044:  GOTO   045
.................... #include "HondaHybrid.h" 
.................... #include <16F873A.h> 
.................... //////// Standard Header file for the PIC16F873A device //////////////// 
.................... #device PIC16F873A 
.................... #list 
....................  
....................  
.................... //#include <16F737.h> 
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... //#device adc=8 
.................... #use delay(clock=20000000) 
.................... #fuses HS,PUT,NOWDT 
.................... #use rs232 (DEBUGGER) 
.................... #include <mcp4921.c> 
.................... //////////////// Driver for MCP4921 D/A Converter /////////////////////// 
.................... ////                                                                 //// 
.................... ////  init_dac()    Call this before using a MCP4921 DAC             //// 
.................... ////                                                                 //// 
.................... ////  write_dac( long int )   Writes command and 12 bit resolution   //// 
.................... ////                          to the MCP4921 which converts it to a  //// 
.................... ////                          voltage                                //// 
.................... ////                          0-4095 input represents 0-vref V out.  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SELECT 
....................  
.................... #define DAC_CS     PIN_C4 
.................... #define DAC_CLK    PIN_C3 
.................... #define DAC_DI     PIN_C5 
.................... #define DAC_LDAC   PIN_B4 
....................  
.................... #endif 
....................  
.................... void init_dac() 
.................... { 
....................    output_high(DAC_CS); 
*
00A7:  BCF    2E.4
00A8:  MOVF   2E,W
00A9:  BSF    03.5
00AA:  MOVWF  07
00AB:  BCF    03.5
00AC:  BSF    07.4
....................    output_high(DAC_LDAC); 
00AD:  BSF    03.5
00AE:  BCF    06.4
00AF:  BCF    03.5
00B0:  BSF    06.4
....................    output_high(DAC_CLK); 
00B1:  BCF    2E.3
00B2:  MOVF   2E,W
00B3:  BSF    03.5
00B4:  MOVWF  07
00B5:  BCF    03.5
00B6:  BSF    07.3
....................    output_high(DAC_DI); 
00B7:  BCF    2E.5
00B8:  MOVF   2E,W
00B9:  BSF    03.5
00BA:  MOVWF  07
00BB:  BCF    03.5
00BC:  BSF    07.5
.................... } 
00BD:  BCF    0A.3
00BE:  GOTO   174 (RETURN)
....................  
.................... void write_dac(int16 data) { 
....................    BYTE cmd[3]; 
....................    BYTE i; 
....................  
....................    cmd[0]=data; 
00BF:  MOVF   47,W
00C0:  MOVWF  49
....................    cmd[1]=(data>>8); 
00C1:  MOVF   48,W
00C2:  MOVWF  4A
....................    cmd[2]=0x03;                            
00C3:  MOVLW  03
00C4:  MOVWF  4B
....................     
....................    output_high(DAC_LDAC); 
00C5:  BSF    03.5
00C6:  BCF    06.4
00C7:  BCF    03.5
00C8:  BSF    06.4
....................    output_low(DAC_CLK); 
00C9:  BCF    2E.3
00CA:  MOVF   2E,W
00CB:  BSF    03.5
00CC:  MOVWF  07
00CD:  BCF    03.5
00CE:  BCF    07.3
....................    output_low(DAC_CS); 
00CF:  BCF    2E.4
00D0:  MOVF   2E,W
00D1:  BSF    03.5
00D2:  MOVWF  07
00D3:  BCF    03.5
00D4:  BCF    07.4
....................  
....................    for(i=0; i<=23; ++i) 
00D5:  CLRF   4C
00D6:  MOVF   4C,W
00D7:  SUBLW  17
00D8:  BTFSS  03.0
00D9:  GOTO   107
....................    { 
....................       if(i<4 || (i>7 && i<12)) 
00DA:  MOVF   4C,W
00DB:  SUBLW  03
00DC:  BTFSC  03.0
00DD:  GOTO   0E6
00DE:  MOVF   4C,W
00DF:  SUBLW  07
00E0:  BTFSC  03.0
00E1:  GOTO   0EB
00E2:  MOVF   4C,W
00E3:  SUBLW  0B
00E4:  BTFSS  03.0
00E5:  GOTO   0EB
....................          shift_left(cmd,3,0); 
00E6:  BCF    03.0
00E7:  RLF    49,F
00E8:  RLF    4A,F
00E9:  RLF    4B,F
....................       else 
00EA:  GOTO   105
....................       { 
....................          output_bit(DAC_DI, shift_left(cmd,3,0)); 
00EB:  BCF    03.0
00EC:  RLF    49,F
00ED:  RLF    4A,F
00EE:  RLF    4B,F
00EF:  BTFSC  03.0
00F0:  GOTO   0F3
00F1:  BCF    07.5
00F2:  GOTO   0F4
00F3:  BSF    07.5
00F4:  BCF    2E.5
00F5:  MOVF   2E,W
00F6:  BSF    03.5
00F7:  MOVWF  07
....................  
....................          output_high(DAC_CLK); 
00F8:  BCF    03.5
00F9:  BCF    2E.3
00FA:  MOVF   2E,W
00FB:  BSF    03.5
00FC:  MOVWF  07
00FD:  BCF    03.5
00FE:  BSF    07.3
....................          output_low(DAC_CLK); 
00FF:  BCF    2E.3
0100:  MOVF   2E,W
0101:  BSF    03.5
0102:  MOVWF  07
0103:  BCF    03.5
0104:  BCF    07.3
....................       } 
....................    } 
0105:  INCF   4C,F
0106:  GOTO   0D6
....................    output_high(DAC_CS); 
0107:  BCF    2E.4
0108:  MOVF   2E,W
0109:  BSF    03.5
010A:  MOVWF  07
010B:  BCF    03.5
010C:  BSF    07.4
....................  
....................    output_low(DAC_LDAC); 
010D:  BSF    03.5
010E:  BCF    06.4
010F:  BCF    03.5
0110:  BCF    06.4
....................    delay_us(10); 
0111:  MOVLW  10
0112:  MOVWF  20
0113:  DECFSZ 20,F
0114:  GOTO   113
0115:  NOP
....................     
....................    output_HIGH(DAC_LDAC); 
0116:  BSF    03.5
0117:  BCF    06.4
0118:  BCF    03.5
0119:  BSF    06.4
.................... } 
011A:  BCF    0A.3
011B:  GOTO   1C0 (RETURN)
....................  
....................  
....................  
....................  
.................... /* 
.................... This is the main controller for the super capacitor hybrid scooter a.k.a RED 
.................... B2 close contactor 
.................... CONTROL BOX INPUTS 
.................... Athrottle- A0 - analog input representing the users input for speed, 10 bit 
.................... Vspeed - CCp2-a 16 bit representation of the speed of the vehicle 
.................... Acaps- A1 - analog input representing the current voltage of the supercapacitors, 10 bit 
....................  
.................... CONTROL BOX OUTPUT 
.................... ICEthrottle- B1 - a 16 bit number sent to the internal combustion engine(ICE) throttle  
.................... ELECthrottle-  - a 16 bit number sent as analog value representing the demanded electric power 
....................  
.................... SPECIFICS OF I/O 
....................  
.................... Athrottle - the electric throttle is a 3 wire unit with a 5 volt,ground, and analog out 
....................    representing how far throttle is turned. Pin AN0 is the input. 
....................     
.................... Vspeed - There is a encoder in the rear wheel/electric motor that is used by the electric 
....................    power controller. Tapping in to this this Main Controller receives a 5 Volt square wave 
....................    with 42 pulses. There are two options for measuring speed. The first is to measure the  
....................    length of the pulses. The second is to measure the rate of pulses. This controller currently 
....................    uses the rate method. The int_ccp2 interupt is called on each falling edge and stores the  
....................    Vspeed value as the max number of 16bit (65535-timer0_since_last_reset).  
....................     
....................    The RED scooter has a circumpherence of 16.3*2*pi = 102.4 
....................    X m/h * 63360 inch/mile * 1/3600 h/sec * 1/(102.4 inch/rev) = .171875* X 
....................    Examples 50 mph is 8.9 ms 1 overflow of timer0 
....................    Example 5 mph is 89 ms or 13 time overflow 
....................     
....................    #int_timer0 increments the counter number_of_overflows each time it overflows 
....................    On int ccp2 we multiply number_of_overflows * 256 + timer0 to get timer0_since_last_reset 
....................     
.................... Acaps - the analog voltage which is the 5volt representation of the voltage in the caps which 
....................    have a value of between 0-48v. The voltages are factored so that the voltage on AN1 goes 
....................    from 0 - 4.8 volts (TODO check this factor, think its 1/11 not 1/10) 
....................     
.................... ICEthrottle -  #int_timer1 is set to make sure the period follows the required below 
....................    The period for the servo is .020 seconds which is 50,000 operations 
....................    The leftmost position of the server is .001 seconds which is 2,500 
....................    The rightmost position of the server is .002 seconds which is 5,000 
....................     
....................    The output pin is pin_B1.-> 
....................  
.................... ELECthrottle 
....................    The electric power controller takes an analog voltage as input. The output voltage 
....................    is set by the DAC. The pins used are C3,C4,C5. if CHARGING_STATE is true then  
....................     
.................... ALGORITHM 
....................    The algorithm is basically a PID controller. In broad terms we are trying to set the 
....................    ICEthrottle and ICEelectric to maximize the use of electric and accelerate to meet the 
....................    requirements set by the rider with the Athrottle signal. When the demanded power is  
....................    less than the power output possible by the ICE and the caps are in the CHARGING_STATE  
....................    then the ICE is turned up to the max and the ELECthrottle is set to regen to 
....................    charge the capacitors.If CHARGING_STATE is false then the caps are supplying the drivig power 
....................    and the ICE is set to "off", the caps supply the power. Unless the user requested supply 
....................    is enough to require both power sources. 
....................     
....................    If CHARGING_STATE is true. Then pin_b2 is set as high which will close the brake number 
....................    for the electric power controller.  
....................     
....................    If CHARGING_STATE is false then the pin_b2 is set low which opens brake. 
....................     
....................     
....................  
....................  
.................... The encoder has 42 on and offs per rotation, i.e. 21 steps 
....................  
.................... Number of operations per second is CLOCK/4/Timer Divisions 
.................... Number of operations per second is 20,000,000/4/128 = 39062.5  
.................... Each operation takes 1/39062.5 = .256 micro (x10^-6) seconds 
.................... Seconds to Overflow timer0 8bit timer = .256x10^-6 * 256 = 6.55ms 
....................  
....................  
....................  
.................... */ 
.................... #define servo_pin PIN_B1  //Setting servo out pin to be hardware pin b1 
.................... #define ADC_DELAY delay_us(20) 
.................... #define Acaps_pin PIN_A1 
.................... #define Acaps_channel 1 
.................... #define Athrottle_pin PIN_A0 
.................... #define Athrottle_channel 0 
.................... #define Electric_Controller_Switch PIN_B0 
.................... #define Contactor_Switch PIN_B2 
....................  
.................... static int16 left_position = 2500; 
*
012D:  MOVLW  C4
012E:  MOVWF  2F
012F:  MOVLW  09
0130:  MOVWF  30
.................... static int16 right_position = 5000; 
0131:  MOVLW  88
0132:  MOVWF  31
0133:  MOVLW  13
0134:  MOVWF  32
.................... static int16 servo_period   = 65356-50000; 
0135:  MOVLW  FC
0136:  MOVWF  33
0137:  MOVLW  3B
0138:  MOVWF  34
.................... unsigned int16 current_servo_position=2500; 
0139:  MOVLW  C4
013A:  MOVWF  35
013B:  MOVLW  09
013C:  MOVWF  36
.................... int1 SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0; 
013D:  BCF    37.0
.................... int1 test_boolean = 0; 
013E:  BCF    37.1
....................  
.................... int1 test_switch = 0; 
013F:  BCF    37.2
.................... unsigned int16 test_counter = 0; 
0140:  CLRF   38
0141:  CLRF   39
....................  
.................... unsigned int8 number_of_timer0_interupts_since_reset =0; 
0142:  CLRF   3A
.................... unsigned int16 timer0_since_last_reset= 0; 
0143:  CLRF   3B
0144:  CLRF   3C
.................... unsigned int16 vSpeed= 255; 
0145:  MOVLW  FF
0146:  MOVWF  3D
0147:  CLRF   3E
.................... unsigned int16 ELECthrottle = 0; 
0148:  CLRF   3F
0149:  CLRF   40
.................... unsigned int16 ICEthrottle = 0; 
014A:  CLRF   41
014B:  CLRF   42
.................... unsigned int16 Athrottle = 0; 
014C:  CLRF   43
014D:  CLRF   44
.................... unsigned int16 Acaps = 0; 
014E:  CLRF   45
014F:  CLRF   46
.................... int1 CURRENTLY_CHARGING = 0; 
0150:  BCF    37.3
....................  
.................... /* 
.................... The #int_timer0 interupt is triggered on each timer0 8bit interupt 
.................... the function simply increments a overflow counter to be used by the ccp2 
.................... interupt to calculate speed 
.................... NUMBER OF OPERATIONS =  
.................... */ 
.................... #int_timer0 
.................... void timer0_isr(){ 
....................    if (number_of_timer0_interupts_since_reset!=255){ 
*
0045:  INCFSZ 3A,W
0046:  GOTO   048
0047:  GOTO   04A
....................       number_of_timer0_interupts_since_reset++; 
0048:  INCF   3A,F
....................        
....................        
....................    } 
....................    else { 
0049:  GOTO   052
....................       vSpeed = 255; 
004A:  CLRF   3E
004B:  MOVLW  FF
004C:  MOVWF  3D
....................       number_of_timer0_interupts_since_reset=0; 
004D:  CLRF   3A
....................       current_servo_position=current_servo_position+100; 
004E:  MOVLW  64
004F:  ADDWF  35,F
0050:  BTFSC  03.0
0051:  INCF   36,F
....................        
....................    } 
.................... } 
....................  
.................... /* 
.................... #int_timer1 is used by the ICEservo throttle to regulate the timing pulses. The  
.................... timer is setup for a pulsetrain of 20ms period. This is done as follows, 
....................  
.................... Period is 1/(CLOCK/4opsperclock)*(startingPostionOfClock) = 20 ms 
.................... for this setup 1/(20000000/4)*(50000) = 20 ms 
....................  
.................... The timer1 starts at 0 and counts up. So we set the beggining of the clock at 
.................... servo_period which is 65356-50000 so that the total time is 20ms. 
.................... */ 
0052:  BCF    0B.2
0053:  BCF    0A.3
0054:  GOTO   02C
.................... #int_timer1 
.................... void isr() 
.................... { 
....................  
.................... //Make sure that the position is within the left and right positions of the servo 
....................    if (current_servo_position<left_position){ 
0055:  MOVF   36,W
0056:  SUBWF  30,W
0057:  BTFSS  03.0
0058:  GOTO   064
0059:  BTFSS  03.2
005A:  GOTO   05F
005B:  MOVF   2F,W
005C:  SUBWF  35,W
005D:  BTFSC  03.0
005E:  GOTO   064
....................       current_servo_position = left_position; 
005F:  MOVF   30,W
0060:  MOVWF  36
0061:  MOVF   2F,W
0062:  MOVWF  35
....................    } 
....................    else if (current_servo_position > right_position){ 
0063:  GOTO   072
0064:  MOVF   32,W
0065:  SUBWF  36,W
0066:  BTFSS  03.0
0067:  GOTO   072
0068:  BTFSS  03.2
0069:  GOTO   06E
006A:  MOVF   35,W
006B:  SUBWF  31,W
006C:  BTFSC  03.0
006D:  GOTO   072
....................       current_servo_position = left_position; 
006E:  MOVF   30,W
006F:  MOVWF  36
0070:  MOVF   2F,W
0071:  MOVWF  35
....................    } 
....................  
....................    if(SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER) 
0072:  BTFSS  37.0
0073:  GOTO   087
....................       {  
....................          output_high(servo_pin);        //Set the servo control pin to high  
0074:  BSF    03.5
0075:  BCF    06.1
0076:  BCF    03.5
0077:  BSF    06.1
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0;  
0078:  BCF    37.0
....................          set_timer1(65356-current_servo_position); //Set timer for the position high pulse 
0079:  MOVF   35,W
007A:  SUBLW  4C
007B:  MOVWF  4D
007C:  MOVLW  FF
007D:  MOVWF  4E
007E:  MOVF   36,W
007F:  BTFSS  03.0
0080:  INCFSZ 36,W
0081:  SUBWF  4E,F
0082:  MOVF   4E,W
0083:  MOVWF  0F
0084:  MOVF   4D,W
0085:  MOVWF  0E
....................       }  
....................    else  
0086:  GOTO   099
....................       {  
....................          output_low(servo_pin);                      // Set the servo control pin to low   
0087:  BSF    03.5
0088:  BCF    06.1
0089:  BCF    03.5
008A:  BCF    06.1
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 1;  
008B:  BSF    37.0
....................          set_timer1(servo_period+current_servo_position);          //Set timer for the low position the length is the difference between  
008C:  MOVF   35,W
008D:  ADDWF  33,W
008E:  MOVWF  4D
008F:  MOVF   34,W
0090:  MOVWF  4E
0091:  MOVF   36,W
0092:  BTFSC  03.0
0093:  INCFSZ 36,W
0094:  ADDWF  4E,F
0095:  MOVF   4E,W
0096:  MOVWF  0F
0097:  MOVF   4D,W
0098:  MOVWF  0E
....................                                                      //the total int16 lenght - high pulse length 
....................       }   
.................... } 
....................  
....................  
.................... /* 
.................... #int_ccp2 is called on the falling edge of the encoder pulse. We calculate the time 
.................... between pulses.  
.................... TODO will have to put some kind of smoothing mechanism 
.................... */ 
0099:  BCF    0C.0
009A:  BCF    0A.3
009B:  GOTO   02C
.................... #int_ccp2 
.................... void isr2() 
.................... { 
.................... if (number_of_timer0_interupts_since_reset>20){ 
009C:  MOVF   3A,W
009D:  SUBLW  14
009E:  BTFSC  03.0
009F:  GOTO   0A4
.................... vSpeed  = number_of_timer0_interupts_since_reset; 
00A0:  CLRF   3E
00A1:  MOVF   3A,W
00A2:  MOVWF  3D
.................... number_of_timer0_interupts_since_reset = 0; 
00A3:  CLRF   3A
.................... } 
.................... } 
....................  
....................  
00A4:  BCF    0D.0
00A5:  BCF    0A.3
00A6:  GOTO   02C
.................... void main() 
.................... {   
*
011C:  CLRF   04
011D:  MOVLW  1F
011E:  ANDWF  03,F
011F:  BSF    03.5
0120:  BCF    06.3
0121:  BCF    03.5
0122:  BSF    06.3
0123:  BSF    03.5
0124:  BSF    1F.0
0125:  BSF    1F.1
0126:  BSF    1F.2
0127:  BCF    1F.3
0128:  MOVLW  07
0129:  MOVWF  1C
....................     
....................    setup_adc_ports(NO_ANALOGS); 
*
0151:  BSF    03.5
0152:  BSF    1F.0
0153:  BSF    1F.1
0154:  BSF    1F.2
0155:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0156:  BCF    03.5
0157:  BCF    1F.0
....................    setup_spi(FALSE); 
0158:  CLRF   14
....................     
....................    setup_counters(RTCC_INTERNAL,RTCC_DIV_2); 
0159:  BSF    03.5
015A:  MOVF   01,W
015B:  ANDLW  C0
015C:  IORLW  00
015D:  MOVWF  01
015E:  CLRWDT
....................    setup_timer_1(T1_DISABLED); 
015F:  BCF    03.5
0160:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
0161:  MOVLW  00
0162:  MOVWF  21
0163:  MOVWF  12
0164:  MOVLW  00
0165:  BSF    03.5
0166:  MOVWF  12
....................    setup_port_a(ALL_ANALOG); 
0167:  BCF    1F.0
0168:  BCF    1F.1
0169:  BCF    1F.2
016A:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
016B:  BCF    1F.6
016C:  BCF    03.5
016D:  BSF    1F.6
016E:  BSF    1F.7
016F:  BSF    03.5
0170:  BSF    1F.7
0171:  BCF    03.5
0172:  BSF    1F.0
....................     
....................    init_dac(); 
0173:  GOTO   0A7
....................   
....................    setup_timer_1(T1_DIV_BY_2| T1_INTERNAL);  
0174:  MOVLW  95
0175:  MOVWF  10
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128); 
0176:  BSF    03.5
0177:  MOVF   01,W
0178:  ANDLW  C0
0179:  IORLW  06
017A:  MOVWF  01
....................    setup_ccp2(CCP_CAPTURE_RE);    // Configure CCP2 to capture fall 
017B:  BCF    03.5
017C:  BSF    2E.1
017D:  MOVF   2E,W
017E:  BSF    03.5
017F:  MOVWF  07
0180:  BCF    03.5
0181:  CLRF   1D
0182:  MOVLW  05
0183:  MOVWF  1D
....................    enable_interrupts(INT_CCP2);   // Setup interrupt on falling edge 
0184:  BSF    03.5
0185:  BSF    0D.0
....................    enable_interrupts(INT_TIMER0); 
0186:  BCF    03.5
0187:  BSF    0B.5
....................    enable_interrupts(INT_TIMER1);   // Setup interrupt on falling edge 
0188:  BSF    03.5
0189:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
018A:  MOVLW  C0
018B:  BCF    03.5
018C:  IORWF  0B,F
....................    output_high(Electric_Controller_Switch); 
018D:  BSF    03.5
018E:  BCF    06.0
018F:  BCF    03.5
0190:  BSF    06.0
....................    output_low(Contactor_Switch); 
0191:  BSF    03.5
0192:  BCF    06.2
0193:  BCF    03.5
0194:  BCF    06.2
....................    while(TRUE) { 
....................        
....................       //GET INPUTS 
....................       //Vspeed happens in interrupts 
....................        
....................       set_adc_channel(Acaps_channel); 
0195:  MOVLW  08
0196:  MOVWF  21
0197:  MOVF   1F,W
0198:  ANDLW  C7
0199:  IORWF  21,W
019A:  MOVWF  1F
....................       ADC_DELAY; 
019B:  MOVLW  21
019C:  MOVWF  20
019D:  DECFSZ 20,F
019E:  GOTO   19D
....................       Acaps = read_adc(); 
019F:  BSF    1F.2
01A0:  BTFSC  1F.2
01A1:  GOTO   1A0
01A2:  BSF    03.5
01A3:  MOVF   1E,W
01A4:  BCF    03.5
01A5:  MOVWF  45
01A6:  MOVF   1E,W
01A7:  MOVWF  46
....................        
....................       set_adc_channel(Athrottle_channel); 
01A8:  MOVLW  00
01A9:  MOVWF  21
01AA:  MOVF   1F,W
01AB:  ANDLW  C7
01AC:  IORWF  21,W
01AD:  MOVWF  1F
....................       ADC_DELAY; 
01AE:  MOVLW  21
01AF:  MOVWF  20
01B0:  DECFSZ 20,F
01B1:  GOTO   1B0
....................       Athrottle = read_adc(); 
01B2:  BSF    1F.2
01B3:  BTFSC  1F.2
01B4:  GOTO   1B3
01B5:  BSF    03.5
01B6:  MOVF   1E,W
01B7:  BCF    03.5
01B8:  MOVWF  43
01B9:  MOVF   1E,W
01BA:  MOVWF  44
....................  
....................       //CONTROL BOX 
....................  
....................        
....................       //current_servo_position=left_position+(Athrottle/1024.0)*2500;//(vSpeed/65536.0)*(2500); 
....................       //printf("Analog Cap %d Analog Throttle %d\n",(int) Acaps, (int) Athrottle); 
....................        
....................     
....................       //SET OUTPUTS  
....................       //The writing of the ICEThrottle happens in interupts and all that is 
....................       //required is updating ICEthrottle 
....................       //write_dac(Athrottle*4); 
....................        
....................       write_dac(3000); 
01BB:  MOVLW  0B
01BC:  MOVWF  48
01BD:  MOVLW  B8
01BE:  MOVWF  47
01BF:  GOTO   0BF
....................    } 
01C0:  GOTO   195
....................     
....................  
.................... } 
....................  
....................  
....................  
....................  
01C1:  GOTO   1C1

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
