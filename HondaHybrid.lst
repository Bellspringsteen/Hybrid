CCS PCM C Compiler, Version 4.084, 46530               20-Oct-12 13:49

               Filename: HondaHybrid.lst

               ROM used: 1080 words (28%)
                         Largest free fragment is 1788
               RAM used: 48 (27%) at main() level
                         66 (37%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   377
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  26
0008:  MOVF   7F,W
0009:  MOVWF  25
000A:  MOVF   0A,W
000B:  MOVWF  2D
000C:  CLRF   0A
000D:  SWAPF  25,F
000E:  MOVF   04,W
000F:  MOVWF  27
0010:  MOVF   20,W
0011:  MOVWF  28
0012:  MOVF   21,W
0013:  MOVWF  29
0014:  MOVF   22,W
0015:  MOVWF  2A
0016:  MOVF   23,W
0017:  MOVWF  2B
0018:  MOVF   24,W
0019:  MOVWF  2C
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   03F
0022:  MOVLW  8D
0023:  MOVWF  04
0024:  BTFSS  00.0
0025:  GOTO   028
0026:  BTFSC  0D.0
0027:  GOTO   041
0028:  BTFSS  0B.5
0029:  GOTO   02C
002A:  BTFSC  0B.2
002B:  GOTO   043
002C:  MOVF   27,W
002D:  MOVWF  04
002E:  MOVF   28,W
002F:  MOVWF  20
0030:  MOVF   29,W
0031:  MOVWF  21
0032:  MOVF   2A,W
0033:  MOVWF  22
0034:  MOVF   2B,W
0035:  MOVWF  23
0036:  MOVF   2C,W
0037:  MOVWF  24
0038:  MOVF   2D,W
0039:  MOVWF  0A
003A:  SWAPF  26,W
003B:  MOVWF  03
003C:  SWAPF  7F,F
003D:  SWAPF  7F,W
003E:  RETFIE
003F:  BCF    0A.3
0040:  GOTO   050
0041:  BCF    0A.3
0042:  GOTO   097
0043:  BCF    0A.3
0044:  GOTO   045
.................... #include "C:\Documents and Settings\Enter\My Documents\Hybrid\Hybrid-v2\HondaHybrid.h" 
.................... #include <16F873A.h> 
.................... //////// Standard Header file for the PIC16F873A device //////////////// 
.................... #device PIC16F873A 
.................... #list 
....................  
....................  
.................... //#include <16F737.h> 
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... //#device adc=8 
.................... #use delay(clock=20000000) 
.................... #fuses HS,PUT,NOWDT 
.................... #use rs232 (DEBUGGER) 
.................... #include <mcp4921.c> 
.................... //////////////// Driver for MCP4921 D/A Converter /////////////////////// 
.................... ////                                                                 //// 
.................... ////  init_dac()    Call this before using a MCP4921 DAC             //// 
.................... ////                                                                 //// 
.................... ////  write_dac( long int )   Writes command and 12 bit resolution   //// 
.................... ////                          to the MCP4921 which converts it to a  //// 
.................... ////                          voltage                                //// 
.................... ////                          0-4095 input represents 0-vref V out.  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SELECT 
....................  
.................... #define DAC_CS     PIN_C4 
.................... #define DAC_CLK    PIN_C3 
.................... #define DAC_DI     PIN_C5 
.................... #define DAC_LDAC   PIN_B4 
....................  
.................... #endif 
....................  
.................... void init_dac() 
.................... { 
....................    output_high(DAC_CS); 
*
00A2:  BCF    2E.4
00A3:  MOVF   2E,W
00A4:  BSF    03.5
00A5:  MOVWF  07
00A6:  BCF    03.5
00A7:  BSF    07.4
....................    output_high(DAC_LDAC); 
00A8:  BSF    03.5
00A9:  BCF    06.4
00AA:  BCF    03.5
00AB:  BSF    06.4
....................    output_high(DAC_CLK); 
00AC:  BCF    2E.3
00AD:  MOVF   2E,W
00AE:  BSF    03.5
00AF:  MOVWF  07
00B0:  BCF    03.5
00B1:  BSF    07.3
....................    output_high(DAC_DI); 
00B2:  BCF    2E.5
00B3:  MOVF   2E,W
00B4:  BSF    03.5
00B5:  MOVWF  07
00B6:  BCF    03.5
00B7:  BSF    07.5
.................... } 
00B8:  BCF    0A.3
00B9:  GOTO   3C7 (RETURN)
....................  
.................... void write_dac(int16 data) { 
....................    BYTE cmd[3]; 
....................    BYTE i; 
....................  
....................    cmd[0]=data; 
....................    cmd[1]=(data>>8); 
....................    cmd[2]=0x03;                            
....................     
....................    output_high(DAC_LDAC); 
....................    output_low(DAC_CLK); 
....................    output_low(DAC_CS); 
....................  
....................    for(i=0; i<=23; ++i) 
....................    { 
....................       if(i<4 || (i>7 && i<12)) 
....................          shift_left(cmd,3,0); 
....................       else 
....................       { 
....................          output_bit(DAC_DI, shift_left(cmd,3,0)); 
....................  
....................          output_high(DAC_CLK); 
....................          output_low(DAC_CLK); 
....................       } 
....................    } 
....................    output_high(DAC_CS); 
....................  
....................    output_low(DAC_LDAC); 
....................    delay_us(10); 
....................     
....................    output_HIGH(DAC_LDAC); 
.................... } 
....................  
....................  
....................  
....................  
.................... /* 
.................... This is the main controller for the super capacitor hybrid scooter a.k.a RED 
.................... B2 close contactor 
.................... CONTROL BOX INPUTS 
.................... Athrottle- A0 - analog input representing the users input for speed, 10 bit 
.................... Vspeed - CCp2-a 16 bit representation of the speed of the vehicle 
.................... Acaps- A1 - analog input representing the current voltage of the supercapacitors, 10 bit 
....................  
.................... CONTROL BOX OUTPUT 
.................... ICEthrottle- B1 - a 16 bit number sent to the internal combustion engine(ICE) throttle  
.................... ELECthrottle-  - a 16 bit number sent as analog value representing the demanded electric power 
....................  
.................... SPECIFICS OF I/O 
....................  
.................... Athrottle - the electric throttle is a 3 wire unit with a 5 volt,ground, and analog out 
....................    representing how far throttle is turned. Pin AN0 is the input. 
....................     
.................... Vspeed - There is a encoder in the rear wheel/electric motor that is used by the electric 
....................    power controller. Tapping in to this this Main Controller receives a 5 Volt square wave 
....................    with 42 pulses. There are two options for measuring speed. The first is to measure the  
....................    length of the pulses. The second is to measure the rate of pulses. This controller currently 
....................    uses the rate method. The int_ccp2 interupt is called on each falling edge and stores the  
....................    Vspeed value as the max number of 16bit (65535-timer0_since_last_reset).  
....................     
....................    The RED scooter has a circumpherence of 16.3*2*pi = 102.4 
....................    X m/h * 63360 inch/mile * 1/3600 h/sec * 1/(102.4 inch/rev) = .171875* X 
....................    Examples 50 mph is 8.9 ms 1 overflow of timer0 
....................    Example 5 mph is 89 ms or 13 time overflow 
....................     
....................    #int_timer0 increments the counter number_of_overflows each time it overflows 
....................    On int ccp2 we multiply number_of_overflows * 256 + timer0 to get timer0_since_last_reset 
....................     
.................... Acaps - the analog voltage which is the 5volt representation of the voltage in the caps which 
....................    have a value of between 0-48v. The voltages are factored so that the voltage on AN1 goes 
....................    from 0 - 4.8 volts (TODO check this factor, think its 1/11 not 1/10) 
....................     
.................... ICEthrottle -  #int_timer1 is set to make sure the period follows the required below 
....................    The period for the servo is .020 seconds which is 50,000 operations 
....................    The leftmost position of the server is .001 seconds which is 2,500 
....................    The rightmost position of the server is .002 seconds which is 5,000 
....................     
....................    The output pin is pin_B1.-> 
....................  
.................... ELECthrottle 
....................    The electric power controller takes an analog voltage as input. The output voltage 
....................    is set by the DAC. The pins used are C3,C4,C5. if CHARGING_STATE is true then  
....................     
.................... ALGORITHM 
....................    The algorithm is basically a PID controller. In broad terms we are trying to set the 
....................    ICEthrottle and ICEelectric to maximize the use of electric and accelerate to meet the 
....................    requirements set by the rider with the Athrottle signal. When the demanded power is  
....................    less than the power output possible by the ICE and the caps are in the CHARGING_STATE  
....................    then the ICE is turned up to the max and the ELECthrottle is set to regen to 
....................    charge the capacitors.If CHARGING_STATE is false then the caps are supplying the drivig power 
....................    and the ICE is set to "off", the caps supply the power. Unless the user requested supply 
....................    is enough to require both power sources. 
....................     
....................    If CHARGING_STATE is true. Then pin_b2 is set as high which will close the brake number 
....................    for the electric power controller.  
....................     
....................    If CHARGING_STATE is false then the pin_b2 is set low which opens brake. 
....................     
....................     
....................  
....................  
.................... The encoder has 42 on and offs per rotation, i.e. 21 steps 
....................  
.................... Number of operations per second is CLOCK/4/Timer Divisions 
.................... Number of operations per second is 20,000,000/4/128 = 39062.5  
.................... Each operation takes 1/39062.5 = .256 micro (x10^-6) seconds 
.................... Seconds to Overflow timer0 8bit timer = .256x10^-6 * 256 = 6.55ms 
....................  
....................  
....................  
.................... */ 
.................... #define servo_pin PIN_B1  //Setting servo out pin to be hardware pin b1 
.................... #define ADC_DELAY delay_us(20) 
.................... #define Acaps_pin PIN_A1 
.................... #define Acaps_channel 1 
.................... #define Athrottle_pin PIN_A0 
.................... #define Athrottle_channel 0 
....................  
.................... static int16 left_position = 2500; 
*
0388:  MOVLW  C4
0389:  MOVWF  2F
038A:  MOVLW  09
038B:  MOVWF  30
.................... static int16 right_position = 5000; 
038C:  MOVLW  88
038D:  MOVWF  31
038E:  MOVLW  13
038F:  MOVWF  32
.................... static int16 servo_period   = 65356-50000; 
0390:  MOVLW  FC
0391:  MOVWF  33
0392:  MOVLW  3B
0393:  MOVWF  34
.................... unsigned int16 current_servo_position=2500; 
0394:  MOVLW  C4
0395:  MOVWF  35
0396:  MOVLW  09
0397:  MOVWF  36
.................... int1 SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0; 
0398:  BCF    37.0
.................... int1 test_boolean = 0; 
0399:  BCF    37.1
....................  
.................... int1 test_switch = 0; 
039A:  BCF    37.2
.................... unsigned int16 test_counter = 0; 
039B:  CLRF   38
039C:  CLRF   39
....................  
.................... unsigned int8 number_of_timer0_interupts_since_reset =0; 
039D:  CLRF   3A
.................... unsigned int16 timer0_since_last_reset= 0; 
039E:  CLRF   3B
039F:  CLRF   3C
.................... unsigned int16 vSpeed= 0; 
03A0:  CLRF   3D
03A1:  CLRF   3E
.................... unsigned int16 ELECthrottle = 0; 
03A2:  CLRF   3F
03A3:  CLRF   40
.................... unsigned int16 ICEthrottle = 0; 
03A4:  CLRF   41
03A5:  CLRF   42
.................... unsigned int16 Athrottle = 0; 
03A6:  CLRF   43
03A7:  CLRF   44
.................... unsigned int16 Acaps = 0; 
03A8:  CLRF   45
03A9:  CLRF   46
.................... int1 CURRENTLY_CHARGING = 0; 
03AA:  BCF    37.3
....................  
.................... /* 
.................... The #int_timer0 interupt is triggered on each timer0 8bit interupt 
.................... the function simply increments a overflow counter to be used by the ccp2 
.................... interupt to calculate speed 
.................... NUMBER OF OPERATIONS =  
.................... */ 
.................... #int_timer0 
.................... void timer0_isr(){ 
....................    if (number_of_timer0_interupts_since_reset!=255){ 
*
0045:  INCFSZ 3A,W
0046:  GOTO   048
0047:  GOTO   04A
....................       number_of_timer0_interupts_since_reset++; 
0048:  INCF   3A,F
....................    } 
....................    else { 
0049:  GOTO   04D
....................       //number_of_timer0_interupts_since_reset = 0; 
....................       vSpeed = 255; 
004A:  CLRF   3E
004B:  MOVLW  FF
004C:  MOVWF  3D
....................    } 
.................... } 
....................  
.................... /* 
.................... #int_timer1 is used by the ICEservo throttle to regulate the timing pulses. The  
.................... timer is setup for a pulsetrain of 20ms period. This is done as follows, 
....................  
.................... Period is 1/(CLOCK/4opsperclock)*(startingPostionOfClock) = 20 ms 
.................... for this setup 1/(20000000/4)*(50000) = 20 ms 
....................  
.................... The timer1 starts at 0 and counts up. So we set the beggining of the clock at 
.................... servo_period which is 65356-50000 so that the total time is 20ms. 
.................... */ 
004D:  BCF    0B.2
004E:  BCF    0A.3
004F:  GOTO   02C
.................... #int_timer1 
.................... void isr() 
.................... { 
....................  
.................... //Make sure that the position is within the left and right positions of the servo 
....................    if (current_servo_position<left_position){ 
0050:  MOVF   36,W
0051:  SUBWF  30,W
0052:  BTFSS  03.0
0053:  GOTO   05F
0054:  BTFSS  03.2
0055:  GOTO   05A
0056:  MOVF   2F,W
0057:  SUBWF  35,W
0058:  BTFSC  03.0
0059:  GOTO   05F
....................       current_servo_position = left_position; 
005A:  MOVF   30,W
005B:  MOVWF  36
005C:  MOVF   2F,W
005D:  MOVWF  35
....................    } 
....................    else if (current_servo_position > right_position){ 
005E:  GOTO   06D
005F:  MOVF   32,W
0060:  SUBWF  36,W
0061:  BTFSS  03.0
0062:  GOTO   06D
0063:  BTFSS  03.2
0064:  GOTO   069
0065:  MOVF   35,W
0066:  SUBWF  31,W
0067:  BTFSC  03.0
0068:  GOTO   06D
....................       current_servo_position = left_position; 
0069:  MOVF   30,W
006A:  MOVWF  36
006B:  MOVF   2F,W
006C:  MOVWF  35
....................    } 
....................  
....................    if(SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER) 
006D:  BTFSS  37.0
006E:  GOTO   082
....................       {  
....................          output_high(servo_pin);        //Set the servo control pin to high  
006F:  BSF    03.5
0070:  BCF    06.1
0071:  BCF    03.5
0072:  BSF    06.1
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0;  
0073:  BCF    37.0
....................          set_timer1(65356-current_servo_position); //Set timer for the position high pulse 
0074:  MOVF   35,W
0075:  SUBLW  4C
0076:  MOVWF  5F
0077:  MOVLW  FF
0078:  MOVWF  60
0079:  MOVF   36,W
007A:  BTFSS  03.0
007B:  INCFSZ 36,W
007C:  SUBWF  60,F
007D:  MOVF   60,W
007E:  MOVWF  0F
007F:  MOVF   5F,W
0080:  MOVWF  0E
....................       }  
....................    else  
0081:  GOTO   094
....................       {  
....................          output_low(servo_pin);                      // Set the servo control pin to low   
0082:  BSF    03.5
0083:  BCF    06.1
0084:  BCF    03.5
0085:  BCF    06.1
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 1;  
0086:  BSF    37.0
....................          set_timer1(servo_period+current_servo_position);          //Set timer for the low position the length is the difference between  
0087:  MOVF   35,W
0088:  ADDWF  33,W
0089:  MOVWF  5F
008A:  MOVF   34,W
008B:  MOVWF  60
008C:  MOVF   36,W
008D:  BTFSC  03.0
008E:  INCFSZ 36,W
008F:  ADDWF  60,F
0090:  MOVF   60,W
0091:  MOVWF  0F
0092:  MOVF   5F,W
0093:  MOVWF  0E
....................                                                      //the total int16 lenght - high pulse length 
....................       }   
.................... } 
....................  
....................  
.................... /* 
.................... #int_ccp2 is called on the falling edge of the encoder pulse. We calculate the time 
.................... between pulses.  
.................... TODO will have to put some kind of smoothing mechanism 
.................... */ 
0094:  BCF    0C.0
0095:  BCF    0A.3
0096:  GOTO   02C
.................... #int_ccp2 
.................... void isr2() 
.................... { 
.................... //!if (test_boolean==0){ 
.................... //!   test_boolean=1; 
.................... //!   output_high(PIN_B1); 
.................... //!} 
.................... //!else { 
.................... //!   test_boolean=0; 
.................... //!   output_low(PIN_B1); 
.................... //!} 
....................  
.................... if (number_of_timer0_interupts_since_reset>20){ 
0097:  MOVF   3A,W
0098:  SUBLW  14
0099:  BTFSC  03.0
009A:  GOTO   09F
....................  
.................... //timer0_since_last_reset = number_of_timer0_interupts_since_reset*256;// + GET_TIMER0(); 
.................... //SET_TIMER0(0); 
.................... vSpeed  = number_of_timer0_interupts_since_reset; 
009B:  CLRF   3E
009C:  MOVF   3A,W
009D:  MOVWF  3D
.................... number_of_timer0_interupts_since_reset = 0; 
009E:  CLRF   3A
.................... //vSpeed = 65535-timer0_since_last_reset; 
.................... } 
.................... } 
....................  
....................  
009F:  BCF    0D.0
00A0:  BCF    0A.3
00A1:  GOTO   02C
.................... void main() 
.................... {   
*
0377:  CLRF   04
0378:  MOVLW  1F
0379:  ANDWF  03,F
037A:  BSF    03.5
037B:  BCF    06.3
037C:  BCF    03.5
037D:  BSF    06.3
037E:  BSF    03.5
037F:  BSF    1F.0
0380:  BSF    1F.1
0381:  BSF    1F.2
0382:  BCF    1F.3
0383:  MOVLW  07
0384:  MOVWF  1C
....................     
....................    setup_adc_ports(NO_ANALOGS); 
*
03AB:  BSF    03.5
03AC:  BSF    1F.0
03AD:  BSF    1F.1
03AE:  BSF    1F.2
03AF:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
03B0:  BCF    03.5
03B1:  BCF    1F.0
....................    setup_spi(FALSE); 
03B2:  CLRF   14
....................     
....................    //setup_counters(RTCC_INTERNAL,RTCC_DIV_2); 
....................    setup_timer_1(T1_DISABLED); 
03B3:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
03B4:  MOVLW  00
03B5:  MOVWF  21
03B6:  MOVWF  12
03B7:  MOVLW  00
03B8:  BSF    03.5
03B9:  MOVWF  12
....................    setup_port_a(ALL_ANALOG); 
03BA:  BCF    1F.0
03BB:  BCF    1F.1
03BC:  BCF    1F.2
03BD:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
03BE:  BCF    1F.6
03BF:  BCF    03.5
03C0:  BSF    1F.6
03C1:  BSF    1F.7
03C2:  BSF    03.5
03C3:  BSF    1F.7
03C4:  BCF    03.5
03C5:  BSF    1F.0
....................     
....................    init_dac(); 
03C6:  GOTO   0A2
....................   
....................    setup_timer_1(T1_DIV_BY_2| T1_INTERNAL);  
03C7:  MOVLW  95
03C8:  MOVWF  10
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128); 
03C9:  BSF    03.5
03CA:  MOVF   01,W
03CB:  ANDLW  C0
03CC:  IORLW  06
03CD:  MOVWF  01
....................    setup_ccp2(CCP_CAPTURE_RE);    // Configure CCP2 to capture fall 
03CE:  BCF    03.5
03CF:  BSF    2E.1
03D0:  MOVF   2E,W
03D1:  BSF    03.5
03D2:  MOVWF  07
03D3:  BCF    03.5
03D4:  CLRF   1D
03D5:  MOVLW  05
03D6:  MOVWF  1D
....................    enable_interrupts(INT_CCP2);   // Setup interrupt on falling edge 
03D7:  BSF    03.5
03D8:  BSF    0D.0
....................    enable_interrupts(INT_TIMER0); 
03D9:  BCF    03.5
03DA:  BSF    0B.5
....................    enable_interrupts(INT_TIMER1);   // Setup interrupt on falling edge 
03DB:  BSF    03.5
03DC:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
03DD:  MOVLW  C0
03DE:  BCF    03.5
03DF:  IORWF  0B,F
....................     
....................    while(TRUE) { 
....................   
....................       //GET INPUTS 
....................       //Vspeed happens in interrupts 
....................       /* 
....................       set_adc_channel(Acaps_channel); 
....................       ADC_DELAY; 
....................       Acaps = read_adc(); 
....................        
....................       set_adc_channel(Athrottle_channel); 
....................       ADC_DELAY; 
....................       Athrottle = read_adc(); 
.................... */ 
....................       //CONTROL BOX 
....................  
....................       //output_low(PIN_B1); 
....................       //delay_ms(1000); 
....................       //output_high(PIN_B1); 
....................       //delay_ms(1000); 
....................        
....................       //delay_ms(Athrottle); 
....................       //output_high(PIN_B1); 
....................       //delay_ms(Athrottle); 
....................       //output_low(PIN_B1); 
....................        
....................       current_servo_position=left_position+(Vspeed/256.0)*2500;//(vSpeed/65536.0)*(2500); 
03E0:  MOVF   3E,W
03E1:  MOVWF  50
03E2:  MOVF   3D,W
03E3:  MOVWF  4F
03E4:  CALL   0BA
03E5:  MOVF   23,W
03E6:  MOVWF  4A
03E7:  MOVF   22,W
03E8:  MOVWF  49
03E9:  MOVF   21,W
03EA:  MOVWF  48
03EB:  MOVF   20,W
03EC:  MOVWF  47
03ED:  CLRF   4E
03EE:  CLRF   4D
03EF:  CLRF   4C
03F0:  MOVLW  87
03F1:  MOVWF  4B
03F2:  GOTO   0D7
03F3:  MOVF   20,W
03F4:  MOVWF  47
03F5:  MOVF   21,W
03F6:  MOVWF  48
03F7:  MOVF   22,W
03F8:  MOVWF  49
03F9:  MOVF   23,W
03FA:  MOVWF  4A
03FB:  MOVWF  4E
03FC:  MOVF   22,W
03FD:  MOVWF  4D
03FE:  MOVF   21,W
03FF:  MOVWF  4C
0400:  MOVF   20,W
0401:  MOVWF  4B
0402:  CLRF   52
0403:  MOVLW  40
0404:  MOVWF  51
0405:  MOVLW  1C
0406:  MOVWF  50
0407:  MOVLW  8A
0408:  MOVWF  4F
0409:  GOTO   1A2
040A:  MOVF   20,W
040B:  MOVWF  4B
040C:  MOVF   21,W
040D:  MOVWF  4C
040E:  MOVF   22,W
040F:  MOVWF  4D
0410:  MOVF   23,W
0411:  MOVWF  4E
0412:  MOVF   30,W
0413:  MOVWF  50
0414:  MOVF   2F,W
0415:  MOVWF  4F
0416:  CALL   0BA
0417:  BCF    03.1
0418:  MOVF   23,W
0419:  MOVWF  52
041A:  MOVF   22,W
041B:  MOVWF  51
041C:  MOVF   21,W
041D:  MOVWF  50
041E:  MOVF   20,W
041F:  MOVWF  4F
0420:  MOVF   4E,W
0421:  MOVWF  56
0422:  MOVF   4D,W
0423:  MOVWF  55
0424:  MOVF   4C,W
0425:  MOVWF  54
0426:  MOVF   4B,W
0427:  MOVWF  53
0428:  GOTO   218
0429:  MOVF   23,W
042A:  MOVWF  52
042B:  MOVF   22,W
042C:  MOVWF  51
042D:  MOVF   21,W
042E:  MOVWF  50
042F:  MOVF   20,W
0430:  MOVWF  4F
0431:  GOTO   357
0432:  MOVF   22,W
0433:  MOVWF  36
0434:  MOVF   21,W
0435:  MOVWF  35
....................       //printf("Analog Cap %d Analog Throttle %d\n",(int) Acaps, (int) Athrottle); 
....................        
....................     
....................       //SET OUTPUTS  
....................       //The writing of the ICEThrottle happens in interupts and all that is 
....................       //required is updating ICEthrottle 
....................       //write_dac(ELECthrottle); 
....................    } 
0436:  GOTO   3E0
....................     
....................  
.................... } 
....................  
....................  
....................  
0437:  GOTO   437

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
