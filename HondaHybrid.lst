CCS PCM C Compiler, Version 4.084, 46530               31-May-13 23:36

               Filename: HondaHybrid.lst

               ROM used: 247 words (6%)
                         Largest free fragment is 1801
               RAM used: 57 (32%) at main() level
                         57 (32%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  NOP
0001:  MOVLW  00
0002:  MOVWF  0A
0003:  GOTO   083
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  26
0008:  MOVF   7F,W
0009:  MOVWF  25
000A:  MOVF   0A,W
000B:  MOVWF  2D
000C:  CLRF   0A
000D:  SWAPF  25,F
000E:  MOVF   04,W
000F:  MOVWF  27
0010:  MOVF   20,W
0011:  MOVWF  28
0012:  MOVF   21,W
0013:  MOVWF  29
0014:  MOVF   22,W
0015:  MOVWF  2A
0016:  MOVF   23,W
0017:  MOVWF  2B
0018:  MOVF   24,W
0019:  MOVWF  2C
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.0
001F:  GOTO   022
0020:  BTFSC  0C.0
0021:  GOTO   03F
0022:  MOVLW  8D
0023:  MOVWF  04
0024:  BTFSS  00.0
0025:  GOTO   028
0026:  BTFSC  0D.0
0027:  GOTO   041
0028:  BTFSS  0B.5
0029:  GOTO   02C
002A:  BTFSC  0B.2
002B:  GOTO   043
002C:  MOVF   27,W
002D:  MOVWF  04
002E:  MOVF   28,W
002F:  MOVWF  20
0030:  MOVF   29,W
0031:  MOVWF  21
0032:  MOVF   2A,W
0033:  MOVWF  22
0034:  MOVF   2B,W
0035:  MOVWF  23
0036:  MOVF   2C,W
0037:  MOVWF  24
0038:  MOVF   2D,W
0039:  MOVWF  0A
003A:  SWAPF  26,W
003B:  MOVWF  03
003C:  SWAPF  7F,F
003D:  SWAPF  7F,W
003E:  RETFIE
003F:  BCF    0A.3
0040:  GOTO   054
0041:  BCF    0A.3
0042:  GOTO   057
0043:  BCF    0A.3
0044:  GOTO   045
.................... #include "HondaHybrid.h" 
.................... #include <16F873A.h> 
.................... //////// Standard Header file for the PIC16F873A device //////////////// 
.................... #device PIC16F873A 
.................... #list 
....................  
....................  
.................... //#include <16F737.h> 
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... //#device adc=8 
.................... #use delay(clock=20000000) 
.................... #fuses HS,PUT,NOWDT 
.................... #use rs232 (DEBUGGER) 
.................... #include <mcp4921.c> 
.................... //////////////// Driver for MCP4921 D/A Converter /////////////////////// 
.................... ////                                                                 //// 
.................... ////  init_dac()    Call this before using a MCP4921 DAC             //// 
.................... ////                                                                 //// 
.................... ////  write_dac( long int )   Writes command and 12 bit resolution   //// 
.................... ////                          to the MCP4921 which converts it to a  //// 
.................... ////                          voltage                                //// 
.................... ////                          0-4095 input represents 0-vref V out.  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SELECT 
....................  
.................... #define DAC_CS     PIN_C4 
.................... #define DAC_CLK    PIN_C3 
.................... #define DAC_DI     PIN_C5 
.................... #define DAC_LDAC   PIN_B4 
....................  
.................... #endif 
....................  
.................... void init_dac() 
.................... { 
....................    output_high(DAC_CS); 
*
006B:  BCF    2E.4
006C:  MOVF   2E,W
006D:  BSF    03.5
006E:  MOVWF  07
006F:  BCF    03.5
0070:  BSF    07.4
....................    output_high(DAC_LDAC); 
0071:  BSF    03.5
0072:  BCF    06.4
0073:  BCF    03.5
0074:  BSF    06.4
....................    output_high(DAC_CLK); 
0075:  BCF    2E.3
0076:  MOVF   2E,W
0077:  BSF    03.5
0078:  MOVWF  07
0079:  BCF    03.5
007A:  BSF    07.3
....................    output_high(DAC_DI); 
007B:  BCF    2E.5
007C:  MOVF   2E,W
007D:  BSF    03.5
007E:  MOVWF  07
007F:  BCF    03.5
0080:  BSF    07.5
.................... } 
0081:  BCF    0A.3
0082:  GOTO   0D4 (RETURN)
....................  
.................... void write_dac(int16 data) { 
....................    BYTE cmd[3]; 
....................    BYTE i; 
....................  
....................    cmd[0]=data; 
....................    cmd[1]=(data>>8); 
....................    cmd[2]=0x03;                            
....................     
....................    output_high(DAC_LDAC); 
....................    output_low(DAC_CLK); 
....................    output_low(DAC_CS); 
....................  
....................    for(i=0; i<=23; ++i) 
....................    { 
....................       if(i<4 || (i>7 && i<12)) 
....................          shift_left(cmd,3,0); 
....................       else 
....................       { 
....................          output_bit(DAC_DI, shift_left(cmd,3,0)); 
....................  
....................          output_high(DAC_CLK); 
....................          output_low(DAC_CLK); 
....................       } 
....................    } 
....................    output_high(DAC_CS); 
....................  
....................    output_low(DAC_LDAC); 
....................    delay_us(10); 
....................     
....................    output_HIGH(DAC_LDAC); 
.................... } 
....................  
....................  
....................  
.................... #include "pid.h" 
.................... /*This file has been prepared for Doxygen automatic documentation generation.*/ 
.................... /*! \file ********************************************************************* 
....................  * 
....................  * \brief Header file for pid.c. 
....................  * 
....................  * - File:               pid.h 
....................  * - Compiler:           IAR EWAAVR 4.11A 
....................  * - Supported devices:  All AVR devices can be used. 
....................  * - AppNote:            AVR221 - Discrete PID controller 
....................  * 
....................  * \author               Atmel Corporation: http://www.atmel.com \n 
....................  *                       Support email: avr@atmel.com 
....................  * 
....................  * $Name$ 
....................  * $Revision: 456 $ 
....................  * $RCSfile$ 
....................  * $Date: 2006-02-16 12:46:13 +0100 (to, 16 feb 2006) $ 
....................  *****************************************************************************/ 
....................  
.................... #ifndef PID_H 
.................... #define PID_H 
....................  
.................... //#include "stdint.h" 
.................... #define INT16_MAX 32767 
.................... #define INT32_MAX 2147483647 
.................... #define SCALING_FACTOR  128 
....................  
.................... /*! \brief PID Status 
....................  * 
....................  * Setpoints and data used by the PID control algorithm 
....................  */ 
.................... typedef struct PID_DATA{ 
....................   //! Last process value, used to find derivative of process value. 
....................   int16 lastProcessValue; 
....................   //! Summation of errors, used for integrate calculations 
....................   int32 sumError; 
....................   //! The Proportional tuning constant, multiplied with SCALING_FACTOR 
....................   int16 P_Factor; 
....................   //! The Integral tuning constant, multiplied with SCALING_FACTOR 
....................   int16 I_Factor; 
....................   //! The Derivative tuning constant, multiplied with SCALING_FACTOR 
....................   int16 D_Factor; 
....................   //! Maximum allowed error, avoid overflow 
....................   int16 maxError; 
....................   //! Maximum allowed sumerror, avoid overflow 
....................   int32 maxSumError; 
.................... } pidData_t; 
....................  
.................... /*! \brief Maximum values 
....................  * 
....................  * Needed to avoid sign/overflow problems 
....................  */ 
.................... // Maximum value of variables 
.................... #define MAX_INT         INT16_MAX 
.................... #define MAX_LONG        INT32_MAX 
.................... #define MAX_I_TERM      (MAX_LONG / 2) 
....................  
.................... // Boolean values 
.................... //#define FALSE           0 
.................... //#define TRUE            1 
....................  
.................... void pid_Init(int16 p_factor, int16 i_factor, int16 d_factor, struct PID_DATA *pid); 
.................... int16 pid_Controller(int16 setPoint, int16 processValue, struct PID_DATA *pid_st); 
.................... void pid_Reset_Integrator(pidData_t *pid_st); 
....................  
.................... #endif 
....................  
.................... /* 
.................... This is the main controller for the super capacitor hybrid scooter a.k.a RED 
.................... B2 close contactor 
.................... CONTROL BOX INPUTS 
.................... Athrottle- A0 - analog input representing the users input for speed, 10 bit 
.................... Vspeed - CCp2-a 16 bit representation of the speed of the vehicle 
.................... Acaps- A1 - analog input representing the current voltage of the supercapacitors, 10 bit 
.................... There are 18 Supercaps with a maximum voltage of 2.7 (2.85 is breakdown) volts for a total of 48.6 V 
.................... The circuit has a 10/110 voltage divider into the ADC. So minimum voltage of 18 Volts is 335 and 48 Volts is 893. Measured 38.2V equal to 726 
....................  
.................... CONTROL BOX OUTPUT 
.................... ICEthrottle- B1 - a 16 bit number sent to the internal combustion engine(ICE) throttle 
.................... ELECthrottle-  - a 16 bit number sent as analog value representing the demanded electric power 
....................  
.................... SPECIFICS OF I/O 
....................  
.................... Athrottle - the electric throttle is a 3 wire unit with a 5 volt,ground, and analog out 
....................    representing how far throttle is turned. Pin AN0 is the input. 
....................  
.................... Vspeed - There is a encoder in the rear wheel/electric motor that is used by the electric 
....................    power controller. Tapping in to this this Main Controller receives a 5 Volt square wave 
....................    with 42 pulses. There are two options for measuring speed. The first is to measure the 
....................    length of the pulses. The second is to measure the rate of pulses. This controller currently 
....................    uses the rate method. The int_ccp2 interupt is called on each falling edge and stores the 
....................    Vspeed value as the max number of 16bit (65535-timer0_since_last_reset). 
....................  
....................    The RED scooter has a circumpherence of 16.3*2*pi = 102.4 
....................    X m/h * 63360 inch/mile * 1/3600 h/sec * 1/(102.4 inch/rev) = .171875* X 
....................    Examples 50 mph is 8.9 ms 1 overflow of timer0 
....................    Example 5 mph is 89 ms or 13 time overflow 
....................  
....................    #int_timer0 increments the counter number_of_overflows each time it overflows 
....................    On int ccp2 we multiply number_of_overflows * 256 + timer0 to get timer0_since_last_reset 
....................  
.................... Acaps - the analog voltage which is the 5volt representation of the voltage in the caps which 
....................    have a value of between 0-48v. The voltages are factored so that the voltage on AN1 goes 
....................    from 0 - 4.8 volts (TODO check this factor, think its 1/11 not 1/10) 
....................  
.................... ICEthrottle -  #int_timer1 is set to make sure the period follows the required below 
....................    The period for the servo is .020 seconds which is 50,000 operations 
....................    The leftmost position of the server is .001 seconds which is 2,500 
....................    The rightmost position of the server is .002 seconds which is 5,000 
....................  
....................    The output pin is pin_B1.-> 
....................  
.................... ELECthrottle 
....................    The electric power controller takes an analog voltage as input. The output voltage 
....................    is set by the DAC. The pins used are C3,C4,C5. if CHARGING_STATE is true then 
....................  
.................... ALGORITHM 
....................    The algorithm is basically a PID controller. In broad terms we are trying to set the 
....................    ICEthrottle and ICEelectric to maximize the use of electric and accelerate to meet the 
....................    requirements set by the rider with the Athrottle signal. When the demanded power is 
....................    less than the power output possible by the ICE and the caps are in the CHARGING_STATE 
....................    then the ICE is turned up to the max and the ELECthrottle is set to regen to 
....................    charge the capacitors.If CHARGING_STATE is false then the caps are supplying the drivig power 
....................    and the ICE is set to "off", the caps supply the power. Unless the user requested supply 
....................    is enough to require both power sources. 
....................  
....................    If CHARGING_STATE is true. Then pin_b2 is set as high which will close the brake number 
....................    for the electric power controller. 
....................  
....................    If CHARGING_STATE is false then the pin_b2 is set low which opens brake. 
....................  
....................  
....................  
....................  
.................... The encoder has 42 on and offs per rotation, i.e. 21 steps 
....................  
.................... Number of operations per second is CLOCK/4/Timer Divisions 
.................... Number of operations per second is 20,000,000/4/128 = 39062.5 
.................... Each operation takes 1/39062.5 = .256 micro (x10^-6) seconds 
.................... Seconds to Overflow timer0 8bit timer = .256x10^-6 * 256 = 6.55ms 
....................  
....................  
....................  
.................... */ 
.................... #define TEST 
.................... #define servo_pin PIN_B1  //Setting servo out pin to be hardware pin b1 
.................... #define brake_pin PIN_B4 
.................... #define ADC_DELAY delay_us(20) 
.................... #define Acaps_pin PIN_A1 
.................... #define Acaps_channel 1 
.................... #define Athrottle_pin PIN_A0  //Voltage goes from 1.5 (306)to 4.1(836) 
.................... #define Athrottle_Min 316 
.................... #define Athrottle_Max 860 
.................... #define Athrottle_Full Athrottle_Max-Athrottle_Min 
.................... #define Athrottle_channel 0 
.................... #define Electric_Controller_Switch PIN_B0  //TODO misnomer should be something like ACCELERATION_BREAKING_SELECTOR_SWITCH 
.................... #define Contactor_Switch PIN_B2 
.................... #define Contactor_Switch2 PIN_B5 
....................  
.................... //PID Values 
.................... #define K_P 1.00 
.................... #define K_I 0.00 
.................... #define K_D 0.00 
....................  
.................... int1 pid_Timer = 0; 
*
0094:  BCF    2F.0
.................... struct PID_DATA pidData; 
.................... #define TIME_INTERVAL 157 //TODO replace 
....................  
.................... #define left_position 4450 
.................... #define right_position 5300 
.................... #define servo_difference  right_position-left_position 
.................... #define ELEC_CONTROLLER_OFFSET 900 
.................... const float Athrottle_servo_factor = ((float) servo_difference)/((float) Athrottle_FULL); 
.................... #define servo_period   65356-50000 
.................... unsigned int16 current_servo_position=right_position; 
0095:  MOVLW  B4
0096:  MOVWF  42
0097:  MOVLW  14
0098:  MOVWF  43
.................... int1 SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0; 
0099:  BCF    2F.1
.................... int1 test_boolean = 0; 
009A:  BCF    2F.2
....................  
.................... int1 test_switch = 0; 
009B:  BCF    2F.3
.................... unsigned int16 test_counter = 0; 
009C:  CLRF   44
009D:  CLRF   45
.................... //int16 returnedValue = 0; 
....................  
.................... unsigned int16 number_of_timer0_interupts_since_reset =0; 
009E:  CLRF   46
009F:  CLRF   47
.................... unsigned int16 timer0_since_last_reset= 0; 
00A0:  CLRF   48
00A1:  CLRF   49
.................... unsigned int16 vSpeed= 0; 
00A2:  CLRF   4A
00A3:  CLRF   4B
.................... signed int16 ELECthrottle = 0; 
00A4:  CLRF   4C
00A5:  CLRF   4D
.................... unsigned int16 ICEthrottle = 0; 
00A6:  CLRF   4E
00A7:  CLRF   4F
.................... unsigned int16 Athrottle = 0; 
00A8:  CLRF   50
00A9:  CLRF   51
.................... unsigned int16 Acaps = 0; 
00AA:  CLRF   52
00AB:  CLRF   53
.................... int1 CURRENTLY_CHARGING = 0; 
00AC:  BCF    2F.4
.................... signed int16 returnedValue =0; 
00AD:  CLRF   54
00AE:  CLRF   55
.................... int16 speeder = 0; 
00AF:  CLRF   56
00B0:  CLRF   57
.................... /* 
.................... The #int_timer0 interupt is triggered on each timer0 8bit interupt 
.................... the function simply increments a overflow counter to be used by the ccp2 
.................... interupt to calculate speed 
.................... NUMBER OF OPERATIONS = 
.................... */ 
.................... #int_timer0 
.................... void timer0_isr(){ 
....................  
....................       number_of_timer0_interupts_since_reset=number_of_timer0_interupts_since_reset+256; 
*
0045:  MOVLW  01
0046:  ADDWF  47,F
....................       //current_servo_position=current_servo_position+1; 
....................  
....................  
....................    if (number_of_timer0_interupts_since_reset>=1024){ 
0047:  MOVF   47,W
0048:  SUBLW  03
0049:  BTFSC  03.0
004A:  GOTO   051
....................       vSpeed = 1280; 
004B:  MOVLW  05
004C:  MOVWF  4B
004D:  CLRF   4A
....................       number_of_timer0_interupts_since_reset=1024; 
004E:  MOVLW  04
004F:  MOVWF  47
0050:  CLRF   46
....................  
....................  
....................    } 
.................... } 
....................  
.................... /* 
.................... #int_timer1 is used by the ICEservo throttle to regulate the timing pulses. The 
.................... timer is setup for a pulsetrain of 20ms period. This is done as follows, 
....................  
.................... Period is 1/(CLOCK/4opsperclock)*(startingPostionOfClock) = 20 ms 
.................... for this setup 1/(20000000/4)*(50000) = 20 ms 
....................  
.................... The timer1 starts at 0 and counts up. So we set the beggining of the clock at 
.................... servo_period which is 65356-50000 so that the total time is 20ms. 
.................... */ 
0051:  BCF    0B.2
0052:  BCF    0A.3
0053:  GOTO   02C
.................... #int_timer1 
.................... void isr() 
.................... { 
.................... /* 
.................... //Make sure that the position is within the left and right positions of the servo 
....................    if (current_servo_position<left_position){ 
....................       current_servo_position = left_position; 
....................    } 
....................    else if (current_servo_position > right_position){ 
....................       current_servo_position = right_position; 
....................    } 
....................  
....................    if(SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER) 
....................       { 
....................          output_high(servo_pin);        //Set the servo control pin to high 
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 0; 
....................          set_timer1(65356-current_servo_position); //Set timer for the position high pulse 
....................       } 
....................    else 
....................       { 
....................          output_low(servo_pin);                      // Set the servo control pin to low 
....................          SERVO_PIN_TO_BE_SET_HIGH_ON_NEXT_TIMER = 1; 
....................          set_timer1(servo_period+current_servo_position);          //Set timer for the low position the length is the difference between 
....................                                                      //the total int16 lenght - high pulse length 
....................       } 
.................... */ 
.................... } 
....................  
....................  
.................... /* 
.................... #int_ccp2 is called on the falling edge of the encoder pulse. We calculate the time 
.................... between pulses. 
.................... TODO will have to put some kind of smoothing mechanism 
.................... */ 
0054:  BCF    0C.0
0055:  BCF    0A.3
0056:  GOTO   02C
.................... #int_ccp2 
.................... void isr2() 
.................... { 
.................... if (number_of_timer0_interupts_since_reset>10){ 
0057:  MOVF   47,F
0058:  BTFSS  03.2
0059:  GOTO   05E
005A:  MOVF   46,W
005B:  SUBLW  0A
005C:  BTFSC  03.0
005D:  GOTO   068
.................... vSpeed  = (number_of_timer0_interupts_since_reset+get_timer0()); 
005E:  MOVF   01,W
005F:  ADDWF  46,W
0060:  MOVWF  4A
0061:  MOVF   47,W
0062:  MOVWF  4B
0063:  BTFSC  03.0
0064:  INCF   4B,F
.................... //vSpeed  = -(get_timer0()); 
.................... set_timer0(0); 
0065:  CLRF   01
.................... number_of_timer0_interupts_since_reset = 0; 
0066:  CLRF   47
0067:  CLRF   46
.................... } 
.................... } 
....................  
0068:  BCF    0D.0
0069:  BCF    0A.3
006A:  GOTO   02C
.................... void trickBreaking(){ 
.................... write_dac((unsigned int16) 400+ELEC_CONTROLLER_OFFSET); 
.................... delay_ms(1000); 
.................... } 
....................  
.................... #ifdef TEST 
....................  
.................... /* 
.................... TEST SUITE 
.................... */ 
....................  
.................... void createHeartbeat(){ 
....................   //This creates a heartbeat on pin B1 
....................   while (1){ 
....................            output_high(servo_pin);        //Set the servo control pin to high 
....................            delay_ms(1000); 
....................            output_low(servo_pin); 
....................            delay_ms(1000); 
....................     } 
.................... } 
....................  
.................... void wiperAnalogVoltage(){ 
....................   
....................  //signed int16 test =0; 
....................  unsigned int16 wiperValue = 0; 
....................     while (1){ 
.................... printf("Wiper Value is now %ld",wiperValue); 
....................    
....................   if (wiperValue>(4095)){ 
....................      wiperValue = 0; 
....................     printf("Wiper Value is now %ld",wiperValue); 
....................   } 
....................   wiperValue=wiperValue+10; 
....................   write_dac(wiperValue); 
....................   delay_ms(10); 
....................     } 
.................... } 
....................  
.................... void heartbeatElectricControllerPower(){ 
....................     while (1){ 
....................  
....................   output_high(Contactor_Switch);        //Set the servo control pin to high 
....................            delay_ms(1000); 
....................            output_low(Contactor_Switch); 
....................            delay_ms(1000); 
....................     } 
.................... } 
....................  
.................... void wiperServo(){ 
....................     while (1){ 
....................  
....................   unsigned int16 wiperValue = servo_difference; 
....................   current_servo_position =right_position-wiperValue; 
....................   wiperValue--; 
....................   if (wiperValue<0){ 
....................     wiperValue = servo_difference; 
....................   } 
....................   delay_ms(10); 
....................     } 
.................... } 
....................  
.................... void printAnalogThrottleInput(){ 
....................     set_adc_channel(Athrottle_channel); 
....................       ADC_DELAY; 
....................       Athrottle = read_adc(); 
....................   printf("Analog Throttle is %ld",Athrottle ); 
.................... } 
....................  
.................... void main() 
.................... { 
*
0083:  CLRF   04
0084:  MOVLW  1F
0085:  ANDWF  03,F
0086:  BSF    03.5
0087:  BCF    06.3
0088:  BCF    03.5
0089:  BSF    06.3
008A:  BSF    03.5
008B:  BSF    1F.0
008C:  BSF    1F.1
008D:  BSF    1F.2
008E:  BCF    1F.3
008F:  MOVLW  07
0090:  MOVWF  1C
....................  
....................    setup_adc_ports(NO_ANALOGS); 
*
00B1:  BSF    03.5
00B2:  BSF    1F.0
00B3:  BSF    1F.1
00B4:  BSF    1F.2
00B5:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
00B6:  BCF    03.5
00B7:  BCF    1F.0
....................    setup_spi(FALSE); 
00B8:  CLRF   14
....................  
....................    setup_counters(RTCC_INTERNAL,RTCC_DIV_2); 
00B9:  BSF    03.5
00BA:  MOVF   01,W
00BB:  ANDLW  C0
00BC:  IORLW  00
00BD:  MOVWF  01
00BE:  CLRWDT
....................    setup_timer_1(T1_DISABLED); 
00BF:  BCF    03.5
00C0:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00C1:  MOVLW  00
00C2:  MOVWF  21
00C3:  MOVWF  12
00C4:  MOVLW  00
00C5:  BSF    03.5
00C6:  MOVWF  12
....................    setup_port_a(ALL_ANALOG); 
00C7:  BCF    1F.0
00C8:  BCF    1F.1
00C9:  BCF    1F.2
00CA:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
00CB:  BCF    1F.6
00CC:  BCF    03.5
00CD:  BSF    1F.6
00CE:  BSF    1F.7
00CF:  BSF    03.5
00D0:  BSF    1F.7
00D1:  BCF    03.5
00D2:  BSF    1F.0
....................  
....................    init_dac(); 
00D3:  GOTO   06B
....................  
....................    setup_timer_1(T1_DIV_BY_2| T1_INTERNAL); 
00D4:  MOVLW  95
00D5:  MOVWF  10
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128); 
00D6:  BSF    03.5
00D7:  MOVF   01,W
00D8:  ANDLW  C0
00D9:  IORLW  06
00DA:  MOVWF  01
....................    setup_ccp2(CCP_CAPTURE_RE);    // Configure CCP2 to capture fall 
00DB:  BCF    03.5
00DC:  BSF    2E.1
00DD:  MOVF   2E,W
00DE:  BSF    03.5
00DF:  MOVWF  07
00E0:  BCF    03.5
00E1:  CLRF   1D
00E2:  MOVLW  05
00E3:  MOVWF  1D
....................    enable_interrupts(INT_CCP2);   // Setup interrupt on falling edge 
00E4:  BSF    03.5
00E5:  BSF    0D.0
....................    enable_interrupts(INT_TIMER0); 
00E6:  BCF    03.5
00E7:  BSF    0B.5
....................    enable_interrupts(INT_TIMER1);   // Setup interrupt on falling edge 
00E8:  BSF    03.5
00E9:  BSF    0C.0
....................    enable_interrupts(GLOBAL); 
00EA:  MOVLW  C0
00EB:  BCF    03.5
00EC:  IORWF  0B,F
....................  
....................    while(TRUE) { 
....................         //Test Breaking Analog Voltage. Should produce analog voltage  on pin 13 as well as drive pin 12 LOW 
....................         //output_high(brake_pin); 
....................         //output_high(Electric_Controller_Switch); 
....................         //wiperAnalogVoltage(); 
....................  
....................         //Test Accelerating Analog Voltage. Should produce analog voltage on pin 15 and let pin 12 float. 
....................         //output_low(brake_pin); 
....................         //output_low(Electric_Controller_Switch); 
....................         //wiperAnalogVoltage(); 
....................          
....................         //Test Short Circuit from Pin 11 to pin 8 with 1 second heartbeat. This tests V+ Controller. Also pin 9 should be heartbeating between 0 and 12V 
....................         //heartbeatElectricControllerPower(); 
....................  
....................         //Test Wiper of Servo 
....................         //wiperServo(); 
....................  
....................        //printAnalogThrottleInput(); 
....................         
....................        //Test Electric Controller Out 
....................        output_high(Contactor_Switch); 
00ED:  BSF    03.5
00EE:  BCF    06.2
00EF:  BCF    03.5
00F0:  BSF    06.2
....................        output_high(Contactor_Switch2); 
00F1:  BSF    03.5
00F2:  BCF    06.5
00F3:  BCF    03.5
00F4:  BSF    06.5
....................  
....................    } 
00F5:  GOTO   0ED
....................  
....................  
.................... } 
....................  
....................  
....................  
.................... #else 
.................... void main() 
.................... { 
....................  
....................    setup_adc_ports(NO_ANALOGS); 
....................    setup_adc(ADC_OFF); 
....................    setup_spi(FALSE); 
....................  
....................    setup_counters(RTCC_INTERNAL,RTCC_DIV_2); 
....................    setup_timer_1(T1_DISABLED); 
....................    setup_timer_2(T2_DISABLED,0,1); 
....................    setup_port_a(ALL_ANALOG); 
....................    setup_adc(ADC_CLOCK_INTERNAL); 
....................  
....................    init_dac(); 
....................  
....................    setup_timer_1(T1_DIV_BY_2| T1_INTERNAL); 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_128); 
....................    setup_ccp2(CCP_CAPTURE_RE);    // Configure CCP2 to capture fall 
....................    enable_interrupts(INT_CCP2);   // Setup interrupt on falling edge 
....................    enable_interrupts(INT_TIMER0); 
....................    enable_interrupts(INT_TIMER1);   // Setup interrupt on falling edge 
....................    enable_interrupts(GLOBAL); 
....................    output_low(Electric_Controller_Switch); 
....................    write_dac(0); 
....................    output_high(Contactor_Switch); 
....................    output_low(brake_pin); 
....................    pid_Init(K_P*SCALING_FACTOR,K_I*SCALING_FACTOR,K_D*SCALING_FACTOR, & pidData); 
....................  
....................    delay_ms(3000); 
....................    //write_dac(1000); 
....................    //delay_ms(10000); 
....................    //output_high(Contactor_Switch); 
....................    //output_high(brake_pin); 
....................    //output_high(Electric_Controller_Switch); 
....................    while(TRUE) { 
....................  
....................       //GET INPUTS 
....................       //Vspeedhappens in interrupts 
....................  
....................       set_adc_channel(Acaps_channel); 
....................       ADC_DELAY; 
....................       Acaps = read_adc(); 
....................  
....................       set_adc_channel(Athrottle_channel); 
....................       ADC_DELAY; 
....................       Athrottle = read_adc(); 
....................  
....................       //CONTROL BOX 
....................  
....................  
....................       if (Athrottle<Athrottle_Min){ 
....................          Athrottle=Athrottle_Min; 
....................       } 
....................       //Servo to mirror Athrottle -> 
.................... //      current_servo_position=right_position-(Athrottle-Athrottle_Min)*Athrottle_servo_factor;//(Athrottle/Athrottle_Full)*servo_difference;//(vSpeed/65536.0)*(2500); 
....................       //printf("Analog Cap %d Analog Throttle %Lu\n",(int) Acaps,Athrottle); 
....................       //current_servo_position =right_position-vSpeed+200; 
....................       speeder = vSpeed; 
....................       //printf("Speed %lu \n",speeder); 
....................       //SET OUTPUTS 
....................       //The writing of the ICEThrottle happens in interupts and all that is 
....................       //required is updating ICEthrottle 
....................       //printf("speed before %ld \n",vSpeed); 
....................  
....................       returnedValue = pid_Controller((Athrottle-AThrottle_Min),(1280-speeder),& pidData); 
....................       ELECthrottle = ELECthrottle+returnedValue; 
....................       if (ELECthrottle>2500){ 
....................          ELECthrottle=2500; 
....................       } 
....................       else if (ELECthrottle<-200){ 
....................          ELECthrottle = -200; 
....................       } 
....................       if (ELECthrottle<0){ 
....................          if (CURRENTLY_CHARGING==1){ 
....................             trickBreaking(); 
....................          } 
....................          //ELECthrottle = 300; 
....................          CURRENTLY_CHARGING=0; 
....................          output_high(brake_pin); 
....................          output_high(Electric_Controller_Switch); 
....................          printf("BREAKING \n"); 
....................       } 
....................       else { 
....................          CURRENTLY_CHARGING=1; 
....................          output_low(brake_pin); 
....................          output_low(Electric_Controller_Switch); 
....................          printf("ACCELERATING \n"); 
....................       } 
....................       printf("input %ld r %lu speed %ld throttle %ld acaps %ld and %Lx\n",Athrottle-Athrottle_Min,((unsigned int16) returnedValue),1280-speeder,ELECthrottle,Acaps,(unsigned int16) (abs(ELECthrottle)+ELEC_CONTROLLER_OFFSET)); 
....................       write_dac((abs(ELECthrottle)+ELEC_CONTROLLER_OFFSET)); 
....................       //Next we want to set the ICE throttle. Which should be as high as possible unless 
....................       //a)It is charging (throttle <0) and the voltage of the cap pack is at Full 
....................       //b)Throttle is at max braking and speed still increasing (delta increasing??) 
....................  
....................       //If a) then switch to electric only mode 
....................       //if b) then decrease the ICE throttle by a factor of the increasing delta 
....................  
....................  
....................       //write_dac((right_position-(right_position-(Athrottle-Athrottle_Min)*Athrottle_servo_factor))*4); 
....................       //write_dac(((Athrottle-AThrottle_Min)*2)+950); 
....................  
....................       //write_dac((right_position-current_servo_position)*4); 
....................    } 
....................  
....................  
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... /*! \brief Initialisation of PID controller parameters. 
....................  * 
....................  *  Initialise the variables used by the PID algorithm. 
....................  * 
....................  *  \param p_factor  Proportional term. 
....................  *  \param i_factor  Integral term. 
....................  *  \param d_factor  Derivate term. 
....................  *  \param pid  Struct with PID status. 
....................  */ 
.................... void pid_Init(int16 p_factor, int16 i_factor, int16 d_factor, struct PID_DATA *pid) 
.................... // Set up PID controller parameters 
00F6:  GOTO   0F6
.................... { 
....................   // Start values for PID controller 
....................   pid->sumError = 0; 
....................   pid->lastProcessValue = 0; 
....................   // Tuning constants for PID loop 
....................   pid->P_Factor = p_factor; 
....................   pid->I_Factor = i_factor; 
....................   pid->D_Factor = d_factor; 
....................   // Limits to avoid overflow 
....................   pid->maxError = MAX_INT / (pid->P_Factor + 1); 
....................   printf("Max %ld factor %ld and pid %ld",MAX_INT,pid->I_Factor,pid->maxError); 
....................   pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1); 
.................... } 
....................  
....................  
.................... /*! \brief PID control algorithm. 
....................  * 
....................  *  Calculates output from setpoint, process value and PID status. 
....................  * 
....................  *  \param setPoint  Desired value. 
....................  *  \param processValue  Measured value. 
....................  *  \param pid_st  PID status struct. 
....................  */ 
.................... int16 pid_Controller(int16 setPoint, int16 processValue, struct PID_DATA *pid_st) 
.................... { 
....................   signed int16 error, p_term, d_term; 
....................   signed int32 i_term, ret, temp; 
....................     processValue=processValue/4; 
....................   //printf("input %ld speed %ld ",setPoint,processValue); 
....................   error = setPoint - processValue; 
....................  
....................   // Calculate Pterm and limit error overflow 
....................  
....................   if (error > (signed int16) pid_st->maxError){ 
....................     p_term = MAX_INT; 
....................     //printf("p greater error %ld a %ld p %ld",error,pid_st->maxError,p_term); 
....................  
....................   } 
....................   else if (error < (signed int16) -pid_st->maxError){ 
....................     p_term = -MAX_INT; 
....................     printf("p less error %ld a %ld p %ld",error,-pid_st->maxError,p_term); 
....................  
....................   } 
....................   else{ 
....................     p_term = (signed int16) (pid_st->P_Factor * (float) error); 
....................     //printf("error %ld a %ld p %ld",error,pid_st->maxError,p_term); 
....................   } 
....................  
....................   // Calculate Iterm and limit integral runaway 
....................   temp = pid_st->sumError + error; 
....................   if(temp > (signed int32)pid_st->maxSumError){ 
....................     i_term = MAX_I_TERM; 
....................     pid_st->sumError = pid_st->maxSumError; 
....................     printf("\n greater temp %ld a %ld sum %ld",temp,pid_st->maxSumError,pid_st->sumError); 
....................  
....................  } 
....................   else if(temp < (signed int32)-pid_st->maxSumError){ 
....................     i_term = -MAX_I_TERM; 
....................     pid_st->sumError = -pid_st->maxSumError; 
....................     printf("\n less temp %ld a %ld sum %ld",temp,pid_st->maxSumError,pid_st->sumError); 
....................  
....................   } 
....................   else{ 
....................     pid_st->sumError = temp; 
....................     i_term = pid_st->I_Factor * pid_st->sumError; 
....................     //printf("\n eror temp %ld i_term %ld sum %ld error %ld ",temp,i_term,pid_st->sumError,error); 
....................  
....................   } 
....................  
....................   // Calculate Dterm 
....................   d_term = pid_st->D_Factor * (pid_st->lastProcessValue - processValue); 
.................... printf("\n p_term %ld d_term %ld i_term %ld",p_term,d_term,i_term); 
....................   pid_st->lastProcessValue = processValue; 
....................  
....................   //ret = (p_term + i_term + d_term) / SCALING_FACTOR; 
....................    ret = (p_term+d_term+(signed int16)i_term) / SCALING_FACTOR; 
....................   if(ret > MAX_INT){ 
....................     ret = MAX_INT; 
....................   } 
....................   else if(ret < -MAX_INT){ 
....................     ret = -MAX_INT; 
....................   } 
....................  
....................   return((signed int16)ret); 
.................... } 
....................  
.................... /*! \brief Resets the integrator. 
....................  * 
....................  *  Calling this function will reset the integrator in the PID regulator. 
....................  */ 
.................... void pid_Reset_Integrator(pidData_t *pid_st) 
.................... { 
....................   pid_st->sumError = 0; 
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT DEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
